@startuml

hide empty fields
hide empty members

namespace at.reder.railcom.data.model {

    interface Entity {
        +getName() : String
        +setName(name : String)
        +getDescription() : String
        +setDescription(description : String)
    }

    interface ModelEntity {
        +getScale() : Scale
        +setScale(scale : Scale)
    }

    Entity <|-- ModelEntity

    enum Scale {
        Z
        N
        HO
        O
        I
    }

    ModelEntity o-- Scale

    namespace impl {

        abstract AbstractEntity {
            #name : String
            #description : String
            +getName() : String
            +setName(name : String)
            +getDescription() : String
            +setDescription(description : String)
        }

        at.reder.railcom.data.model.Entity <|.. AbstractEntity

        abstract AbstractModelEntity {
            #AbstractModelEntity(entity : Entity)
            #scale : Scale
            +getScale() : Scale
            +setScale(scale : Scale)
        }

        at.reder.railcom.data.model.ModelEntity <|.. AbstractModelEntity

    }
}

namespace at.reder.railcom.data.model.rail {

    interface RailwayEntity {
        +getWheelTrack() : int
        +setWheelTrack(wheelTrack : int)
        +getRailwayAgency() : String
        +setRailwayAgency(railwayAgency : String)
        +getMass() : int
        +setMass(mass : int)
    }
    note left
        Spurweite in mm
        Masse in t
    end note

    at.reder.railcom.data.model.Entity <|-- RailwayEntity

    interface Locomotive {
        +getWheelArrangement() : String
        +setWheelArrangement(wheelArrangement : String)
        +getPower() : int
        +setPower(power : int)
    }
    note right
        Power in kw
    end note

    RailwayEntity <|-- Locomotive

    interface SteamLocomotive {
        +getCylinderCount(type : CylinderType) : int
        +setCylinderCount(type : CylinderType, cylinderCount : int)
        +getFuelType() : FuelType
        +setFuelType(steamFuelType : FuelType)
        +getFuelCapacity() : int
        +setFuelCapacity(fuelCapacity : int)
        +getWaterCapacity() : int
        +setWaterCapacity(waterCapacity : int)
    }
    note right
        Kohl/Öl-Vorrat in t
        Wasser/Dampf in m³
    end note

    Locomotive <|-- SteamLocomotive

    enum CylinderType {
        SUPERHEATED_STEAM_CYLINDER
        WET_STEAM_CYLINDER
    }

    enum FuelType {
        WOOD
        COAL
        OIL
        STEAM
        getUnit() : String
    }

    SteamLocomotive *-- CylinderType
    SteamLocomotive *-- FuelType

    interface DieselLocomotive {
        +getCylinderCount() : int
        +setCylinderCount(cylinderCount : int)
        +getCylinderCapacity() : int
        +setCylinderCapacity(cylinderCapacity : int)
        +getFuelCapacity() : int
        +setFuelCapacity(fuelCapaicty : int)
    }
    note left
        Dieselvorrat in t
        Hubraum in cm³
    end note

    Locomotive <|-- DieselLocomotive

    interface ElectricLocomotive {
        +getElectricSystems() : Set<ElecticSystem>
        +addElectricSystem(electricSystem : ElectricSystem)
        +removeElectricSystem(electricSystem : ElectricSystem)
    }

    Locomotive <|-- ElectricLocomotive

    interface ElectricSystem {
        +getVoltage() : int
        +getFrequency() : double
    }
    note left
        Volt in V
        Frequenz in Hz
    end note

    ElectricLocomotive "*" *-- "*" ElectricSystem

    interface Wagon {
        +getAxisCount() : int
        +setAxisCount(axisCount : int)
    }

    RailwayEntity <|-- Wagon

    interface Train {
        +getTrain() : List<RailwayEntity>
        +addEntity(pos : int, entity : RailwayEntity)
    }

    Train "1" *-- "*" RailwayEntity

    namespace impl {
        abstract AbstractRailwayEntity {
            #wheelTrack : int
            #railwayAgency : String
            #mass : int
            +getWheelTrack() : int
            +setWheelTrack(wheelTrack : int)
            +getRailwayAgency() : String
            +setRailwayAgency(railwayAgency : String)
            +getMass() : int
            +setMass(mass : int)
        }

        at.reder.railcom.data.model.rail.RailwayEntity <|.. AbstractRailwayEntity

        abstract AbstractLocomotive {
            #power : int
            #wheelArrangement : String
            +getWheelArrangement() : String
            +setWheelArrangement(wheelArrangement : String)
            +getPower() : int
            +setPower(power : int)
        }

        class SteamLocomotiveImpl {
            #cylinderCount : Map<CylinderType, int>
            #fuelType : FuelType
            #fuelCapacity : int
            #waterCapacity : int
            +SteamLocomotiveImpl()
            +getCylinderCount(type : CylinderType) : int
            +setCylinderCount(type : CylinderType, cylinderCount : int)
            +getFuelType() : FuelType
            +setFuelType(steamFuelType : FuelType)
            +getFuelCapacity() : int
            +setFuelCapacity(fuelCapacity : int)
            +getWaterCapacity() : int
            +setWaterCapacity(waterCapacity : int)
        }

        class ElectricLocomotiveImpl {
            #electricSystems : Set<ElectricSystem>
            +ElectricLocomotiveImpl()
            +getElectricSystems() : Set<ElecticSystem>
            +addElectricSystem(electricSystem : ElectricSystem)
            +removeElectricSystem(electricSystem : ElectricSystem)
        }

        class DieselLocomotiveImpl {
            #cylinderCount : int
            #cylinderCapacity : int
            #fuelCapacity : int
            +DieselLocomotiveImpl()
            +getCylinderCount() : int
            +setCylinderCount(cylinderCount : int)
            +getCylinderCapacity() : int
            +setCylinderCapacity(cylinderCapacity : int)
            +getFuelCapacity() : int
            +setFuelCapacity(fuelCapaicty : int)
        }

        at.reder.railcom.data.model.rail.Locomotive <|.. AbstractLocomotive
        AbstractRailwayEntity <|-- AbstractLocomotive
        AbstractLocomotive <|-- SteamLocomotiveImpl
        at.reder.railcom.data.model.rail.SteamLocomotive <|.. SteamLocomotiveImpl
        AbstractLocomotive <|-- ElectricLocomotiveImpl
        at.reder.railcom.data.model.rail.ElectricLocomotive <|.. ElectricLocomotiveImpl
        AbstractLocomotive <|-- DieselLocomotiveImpl
        at.reder.railcom.data.model.rail.DieselLocomotive <|.. DieselLocomotiveImpl
    }

}

namespace at.reder.railcom.data.model.track {

    interface Signal {
    }

    at.reder.railcom.datamodel.Entity <|-- Signal

    interface Turnout {
    }

    at.reder.railcom.datamodel.Entity <|-- Turnout

    interface Platform {
    }

    at.reder.railcom.datamodel.Entity <|-- Platform

    interface BlockPost {
    }

    at.reder.railcom.datamodel.Entity <|-- BlockPost
}

namespace at.reder.railcom.datamodel.street {

    interface StreetEntity {
    }

    at.reder.railcom.datamodel.Entity <|-- StreetEntity

}

namespace at.reder.railcom.datamodel.building {

    interface HouseEntity {
    }

    at.reder.railcom.datamodel.Entity <|-- HouseEntity
}

namespace at.reder.railcom.datamodel.persistence.jpa {

    class LocomotiveEntity {
    }


}
@enduml
